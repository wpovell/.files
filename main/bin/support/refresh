#!/usr/bin/env python3

# Regenerates theme files / updates open terminals

import re
from pathlib import Path

def get_colors():
    with open(Path.home() / '.theme') as f:
        dat = f.read().strip()
    colors = re.findall(r'([FBC\d]{2,3})\s+(\#[\da-f]{6})', dat, re.IGNORECASE)
    colors.sort(key = lambda x: -len(x[0]))
    return colors

def term_string(colors):
    to_write = ''
    for c, v in colors:
        # Get in rr/gg/bb format
        hexc = v[1:].lower()
        hexc = '/'.join(map(''.join, zip(*[iter(hexc)]*2)))
        fmt = lambda n, c: "\033]{};rgb:{}\007".format(n, c)
        if c == 'FC':
            to_write += fmt('10', hexc)
        if c == 'BC':
            to_write += fmt('708', hexc)
            to_write += fmt('11', hexc)
        elif c == 'CC':
            to_write += fmt('12', hexc)
        else:
            n = c.replace('C','')
            to_write += fmt('4;'+n, hexc)
    return to_write

def refresh_terminals(colors):
    to_write = term_string(colors)
    for term in Path('/dev/pts/').glob('[0-9]*'):
        with open(term, "w") as file:
            file.write(to_write)

def generate_css(colors):
    to_write = ':root {\n'
    for c, v in colors:
        if c == 'FC':
            to_write += '\t--foreground: {}'.format(v)
        elif c == 'BC':
            to_write += '\t--background: {}'.format(v)
        elif c != 'CC':
            to_write += '\t--color{}: {}'.format(c[1:], v)
        to_write += ';\n'
    to_write += '}'

    css_path = Path.home() / '.files/gen/colors.css'
    Path.mkdir(css_path.parent, parents=True, exist_ok=True)
    with open(css_path, 'w') as f:
        f.write(to_write)

def generate_kitty_conf(colors):
    path = Path.home() / '.files/gen/colors.conf'
    to_write = ''
    for c, v in colors:
        if c == 'FC':
            to_write += f'foreground {v}\n'
            to_write += f'selection_background {v}'
        elif c == 'BC':
            to_write += f'background {v}\n'
            to_write += f'selection_foreground {v}'
        elif c == 'CC':
            to_write += f'cursor {v}'
        else:
            to_write += f'color{c[1:]} {v}'
        to_write += '\n'
    with open(path, 'w') as f:
        f.write(to_write)

if __name__ == '__main__':
    from sys import argv

    colors = get_colors()
    generate_css(colors)
    generate_kitty_conf(colors)
    refresh_terminals(colors)
