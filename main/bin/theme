#!/usr/bin/env python3
import sys
import os
from subprocess import call, STDOUT, DEVNULL
from pathlib import Path
import yaml
import pystache

def load_theme(fn):
    '''Load theme from `fn`.'''
    with open(fn) as f:
        data = yaml.load(f)

    theme = dict()
    for name, color in data.items():
        if not name.startswith('base'):
            theme[name] = color
            continue
        color = color.replace('#', '')
        theme[f'{name}-hex'] = color

        for i, ch in enumerate('rgb'):
            c = color[i*2:(i+1)*2]
            n = int(c, 16)
            theme[f'{name}-hex-{ch}'] = c
            theme[f'{name}-rgb-{ch}'] = n
            theme[f'{name}-dec-{ch}'] = n/255

    return theme

def render(fn, theme):
    '''Render `fn` with `theme`.'''
    with open(fn) as f:
        template = f.read()
    return pystache.render(template, theme)

def generate(theme):
    '''Template files with theme.'''
    for fn in filter(Path.is_file, template_root.glob('**/*')):
        dest = Path(str(fn)
                    .replace(str(template_root),
                             str(dest_root), 1))
        dest.parent.mkdir(parents=True, exist_ok=True)
        with open(dest, 'w') as f:
            f.write(render(fn, theme))

template_root = Path('~/.files/template').expanduser()
dest_root     = Path('~/.files/gen').expanduser()
theme_root    = Path('~/.files/themes').expanduser()
cur_fn        = Path('~/.theme').expanduser()
if __name__ == '__main__':
    cur_theme = 'None'
    try:
        with open(cur_fn) as f:
            cur_theme = f.read()
    except FileNotFoundError:
        pass

    if len(sys.argv) < 2:
        print(f'Current theme:    {cur_theme}')
        themes=' '.join(map(lambda x: x.stem, theme_root.glob('*')))
        print('Available themes: {}'.format(themes))
        sys.exit(1)

    arg = sys.argv[1]
    if not arg.endswith('.yaml'):
        arg += '.yaml'

    theme_fn = (theme_root / arg)
    if not theme_fn.exists():
        print(theme_fn)
        print('Theme does not exist')
        sys.exit(1)

    theme = load_theme(theme_fn)
    generate(theme)

    home=os.environ['HOME']
    call(f'{home}/bin/support/refresh {theme["base01-hex"]}'.split(),
         stdout=DEVNULL,
         stderr=STDOUT)

    with open(cur_fn, 'w') as f:
        f.write(arg.replace('.yaml',''))
